#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>

#define MAX 100

struct date
{
    int day;
    int month;
    int year;
};

struct person
{
    char fam[20];
    char im[20];
    char ot[20];
    int sr_vrst;
    char specialty[50];
    float sr_zp;
    int opit; // Стаж в годах
};  typedef person;

struct factory
{
    int naz_factory;
    struct person persons[MAX];
    int col_person;
}   typedef factory;

/* Объявление функций*/

int dim(int m, int y);
int validate_date(int d, int m, int y);
void add_factory(factory* factories);
void add_persons(struct person* p);
void print_factory(factory factory);
void create_factory_file(const char* filename);
void clear_factory_file(const char* filename);
void read_factory_file(const char* filename);

int main()
{

    
    factory factories;
    char filename[50];

    add_factory(&factories);

    printf("Введите имя файла для сохранения данных: ");
    scanf("%s", filename);

    create_factory_file(filename);
    read_factory_file(filename);
    
    print_factory(factories);
    
}

/* Функции */

int dim(int m, int y)
{
    if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)
        return 31;
    else if (m == 4 || m == 6 || m == 9 || m == 11)
        return 30;
    else if (m == 2 && (y % 4 == 0 && y % 100 != 0 || y % 400 == 0))
        return 29;
    else
        return 28;
}

int validate_date(int d, int m, int y)
{
    if (m < 1 || m > 12)
    {
        printf("Несуществующий месяц\n");
        return 0;
    }
    if (d < 1 || d > dim(m, y))
    {
        printf("Несуществующий день\n");
        return 0;
    }
    return 1; // Дата корректна
}

void add_factory(factory* factories)
{
    printf("Введите номер завода: ");
    scanf("%d", &factories->naz_factory);

    printf("Введите количество работников(Максимум %d): ", MAX);
    scanf("%d", &factories->col_person);
    if (factories->col_person > MAX)
    {
        printf("Ошибка: количество работников не может превышать %d.\n", MAX);
    }

    for (int i = 0; i < factories->col_person; i++)
    {
        printf("\nВведите данные для работника %d:\n", i + 1);
        add_persons(&factories->persons[i]);
    }
}

void add_persons(struct person* person)
{
    printf("Введите фамилию, имя, отчество: ");
    scanf("%s %s %s", person->fam, person->im, person->ot);
    while (1)
    {
        printf("Введите средний возраст: ");
        scanf("%d", &person->sr_vrst);
        if (person->sr_vrst < 0) {
            printf("Ошибка: средний возраст не может быть отрицательным. Попробуйте снова.\n");
        }
        else {
            break;
        }
    }
    printf("Введите специальность: ");
    scanf("%s", person->specialty);
    while (1)
    {
        printf("Введите средний оклад: ");
        scanf("%f", &person->sr_zp);
        if (person->sr_zp < 0) {
            printf("Ошибка: средний оклад не может быть отрицательным. Попробуйте снова.\n");
        }
        else {
            break;
        }
    }
    while (1)
    {
        printf("Введите стаж (в годах): ");
        scanf("%d", &person->opit);
        if (person->opit < 0) {
            printf("Ошибка: стаж не может быть отрицательным. Попробуйте снова.\n");
        }
        else {
            break;
        }
    }
}

void print_factory(factory factory)
{
    for (int i = 0; i < factory.col_person; i++) {
        printf("Работник %d :\n", i + 1);
        printf("Фамилия: %s\n", factory.persons[i].fam);
        printf("Имя: %s\n", factory.persons[i].im);
        printf("Отчество: %s\n", factory.persons[i].ot);
        printf("Средний возраст: %d\n", factory.persons[i].sr_vrst);
        printf("Специальность: %s\n", factory.persons[i].specialty);
        printf("Средний оклад: %.2f\n", factory.persons[i].sr_zp);
        printf("Стаж: %d лет\n", factory.persons[i].opit);
    }
}

void create_factory_file(const char* filename)
{
    FILE* file = fopen(filename, "w");
    if (file == NULL)
    {
        perror("Ошибка создания файла");
        return;
    }
}

void clear_factory_file(const char* filename)
{
    FILE* file = fopen(filename, "w"); 
    if (file == NULL) {
        perror("Ошибка открытия файла для очистки");
        return;
    }
    fclose(file); // Закрываем файл
}

void read_factory_file(const char* filename, factory* factories)
{
    FILE* file = fopen(filename, "r");
    if (file == NULL)
    {
        perror("Ошибка чтения файла");
        return;
    }

    // Считываем номер завода
    fscanf(file, "%d", &factories->naz_factory);

    // Считываем данные работников
    factories->col_person = 0; // Обнуляем количество работников перед считыванием
    while (fscanf(file, "%s %s %s %d %s %f %d",
        factories->persons[factories->col_person].fam,
        factories->persons[factories->col_person].im,
        factories->persons[factories->col_person].ot,
        &factories->persons[factories->col_person].sr_vrst,
        factories->persons[factories->col_person].specialty,
        &factories->persons[factories->col_person].sr_zp,
        &factories->persons[factories->col_person].opit) == 7)
    {
        factories->col_person++;
    }

    fclose(file); // Закрываем файл
}
