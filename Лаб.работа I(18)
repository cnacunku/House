#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
#include <conio.h>
#include <math.h>
#include <time.h>
#define DVATRI 84
#define KOL_REISOV 5
struct point {
	float x;
	float y;
	char name;
};

typedef struct point Point;

void put_point(Point b) {

	printf("\n\npoint %c (%.1f,%.1f)", b.name, b.x, b.y);
}

float dist(Point z, Point w) {
	float dek = sqrt(pow(w.x - z.x, 2) + pow(w.y - z.y, 2));
	return dek;
}

Point ser_otr(Point z, Point w) {
	Point m;
	m.name = 'M';
	m.x = ((z.x + w.x) / 2);
	m.y = ((z.y + w.y) / 2);
	return m;
}

int plosk(Point w) {
	if (w.x > 0 && w.y > 0)
		return 1;
	else if (w.x < 0 && w.y > 0)
		return 2;
	else if (w.x < 0 && w.y < 0)
		return 3;
	else if (w.x > 0 && w.y < 0)
		return 4;
}

struct Reis {
	char nomer_reisa[10];
	int chas_vileta, minuta_vileta;
	int chas_prileta, minuta_prileta;
	char napravlenie[40];
	char marka_samoleta[40];
	double rasstoyanie;
};

double dlit_poleta(int chas_vileta,int minuta_vileta, int chas_prileta, int minuta_prileta) {
	int n_poleta_minut = chas_vileta * 60 + minuta_vileta;
	int k_poleta_minut = chas_prileta * 60 + minuta_prileta;
	return k_poleta_minut - n_poleta_minut;
}

int main()
{
	setlocale(LC_CTYPE, "RUS");
	Point b, a, z, w;
	a = (Point){ 1.f,2.f,'A' };
	b.name = 'B'; b.x = 5, b.y = -3;
	z.name = 'Z'; z.x = 3, z.y = -4;
	w.name = 'W'; w.x = -5, w.y = -3;

	put_point(b);

	printf("\n\nДекартовое расстояние между точками %c и %c > %f", z.name, w.name, dist(z, w));

	Point m = ser_otr(z, w);
	put_point(m);

	printf("\n\nТочка %c находится в %d плоскости", w.name, plosk(w));


	struct tm* mytime;
	time_t t;
	t = time(NULL);
	mytime = localtime(&t);
	printf("\n\nМосковское время %02d:%02d:%02d\n", mytime->tm_hour, mytime->tm_min, mytime->tm_sec);

	char text[DVATRI];
	sprintf(text,"\n********************************************************************************\n");
	printf(text);
	char* RIM_CIF[] = { "I","II","III","IV","V","VI","VII","VIII","IX","X","XI","XII" };
	printf("*%29sМесяц %s и год %d %29s*", "", RIM_CIF[mytime->tm_mon], mytime->tm_year + 1900, "");
	printf(text);
	
	printf("\n\n\n");

	struct Reis Polet[KOL_REISOV];

	for (int i = 0; i <KOL_REISOV; i++) {
		printf("Введите данные рейса %d :\n",i+1);
		printf("Номер рейса : ");
		scanf("%s", Polet[i].nomer_reisa);
		printf("Время вылета (чч мм) : ");
		scanf("%d:%d", &Polet[i].chas_vileta, &Polet[i].minuta_vileta);
		printf("Время прилета (чч:мм) : ");
		scanf("%d:%d", &Polet[i].chas_prileta, &Polet[i].minuta_prileta);
		printf("Направление : ");
		scanf("%s", Polet[i].napravlenie);
		printf("Марка самолёта : ");
		scanf("%s", Polet[i].marka_samoleta);
		printf("Расстояние : ");
		scanf("%lf", &Polet[i].rasstoyanie);

	}

	int max_polet=0, max_polet_i=0;
	for (int i = 0; i < KOL_REISOV;i++) {
		int vremya = dlit_poleta(Polet[i].chas_vileta, Polet[i].minuta_vileta, Polet[i].chas_prileta, Polet[i].minuta_prileta);
		if (vremya > max_polet) {
			max_polet = vremya;
			max_polet_i = i;
		}
	}
	printf("\nРейс с максимальной длительностью полета :\n");
	printf("Номер рейса: %s\n", Polet[max_polet_i].nomer_reisa);
	printf("Время вылета: %02d:%02d\n", Polet[max_polet_i].chas_vileta, Polet[max_polet_i].minuta_vileta);
	printf("Время прилета: %02d:%02d\n", Polet[max_polet_i].chas_prileta, Polet[max_polet_i].minuta_prileta);
	printf("Направление: %s\n", Polet[max_polet_i].napravlenie);
	printf("Марка самолёта: %s\n", Polet[max_polet_i].marka_samoleta);
	printf("Расстояние: %.2lf\n", Polet[max_polet_i].rasstoyanie);
	
}
